generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum EnumMeasuresTypes {
  KILOGRAM
  KILOMETERS
  REPEATS
  METERS
  HOURS
  MINUTES
  SECONDS
  CALORIES
}

enum EnumWorkoutStatus {
  NEW
  IN_PROGGRES
  DONE
}

enum EnumUserRoles {
  ADMIN
  MANAGER
  USER
}

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  email    String        @unique
  password String
  name     String?       @default("User")
  userRole EnumUserRoles @default(USER) @map("user_role")

  data UserData?

  workouts      Workout[]
  workoutsTypes WorkoutType[]
  tags          Tags[]
  exercises     Exercise[]

  @@map("user")
}

model UserData {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  height     Int?
  weight     Int?
  age        Int?
  userAvatar String? @default("/uploads/avatars/user-avatar.png") @map("user_avatar")

  user   User? @relation(fields: [userId], references: [id])
  userId Int?  @unique @map("user_id")

  userPhotos UserPhotos[]

  @@map("user_data")
}

model UserPhotos {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  photo String

  userData   UserData @relation(fields: [userDataId], references: [id])
  userDataId Int      @map("user_data_id")

  @@map("user_photos")
}

model Workout {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  name      String
  date      DateTime          @default(now())
  status    EnumWorkoutStatus
  duration  Int?
  isFavorie Boolean           @default(false) @map("is_favorite")

  user          User?        @relation(fields: [userId], references: [id])
  userId        Int?         @map("user_id")
  workoutType   WorkoutType? @relation(fields: [workoutTypeId], references: [id])
  workoutTypeId Int?         @map("workout_type_id")

  tags      Tags[]
  exercises Exercise[]

  @@map("workout")
}

model WorkoutType {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  name      String  @unique
  isFavorie Boolean @default(false) @map("is_favorite")

  user               User?             @relation(fields: [userId], references: [id])
  userId             Int?              @map("user_id")
  workoutTypeIcons   WorkoutTypeIcons? @relation(fields: [workoutTypeIconsId], references: [id])
  workoutTypeIconsId Int?              @map("workout_type_icons_id")

  workouts Workout[]

  @@map("workout_type")
}

model WorkoutTypeIcons {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  icon String

  workoutTypes WorkoutType[]

  @@map("workout_type_icons")
}

model Tags {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  name      String  @unique
  isFavorie Boolean @default(false) @map("is_favorite")

  user      User?    @relation(fields: [userId], references: [id])
  userId    Int?     @map("user_id")
  workout   Workout? @relation(fields: [workoutId], references: [id])
  workoutId Int?     @map("workout_id")

  @@map("tags")
}

model Exercise {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  name        String  @unique
  description String?
  isFavorie   Boolean @default(false) @map("is_favorite")

  user      User?    @relation(fields: [userId], references: [id])
  userId    Int?     @map("user_id")
  workout   Workout? @relation(fields: [workoutId], references: [id])
  workoutId Int?     @map("workout_id")
  measure   Measure? @relation(fields: [measureId], references: [id])
  measureId Int?     @map("measure_id")

  sets Set[]

  @@map("exercise")
}

model Set {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  exercise   Exercise? @relation(fields: [exerciseId], references: [id])
  exerciseId Int?      @map("exercise_id")

  repeats Repeat[]

  @@map("set")
}

model Repeat {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  value Int
  set   Set? @relation(fields: [setId], references: [id])
  setId Int  @map("set_id")

  @@map("repeat")
}

model Measure {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  type     EnumMeasuresTypes @unique
  exercise Exercise[]

  @@map("measure")
}
